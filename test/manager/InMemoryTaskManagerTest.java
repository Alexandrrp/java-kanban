package manager;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import task.Epic;
import task.Subtask;
import task.Task;
import task.Status;
import manager.Managers;

import java.util.List;

class InMemoryTaskManagerTest {

    TaskManager taskManager;

    @Test
    void shouldAddAndFindDifferentTasks() {
        taskManager = Managers.getDefault();
        Task task = new Task("Task", Status.NEW, "Description");
        task = taskManager.createTask(task);

        Epic epic = new Epic("Epic", "Description");
        epic = taskManager.createEpic(epic);

        Subtask subtask = new Subtask("Subtask", Status.NEW, "Description", epic.getId());
        subtask = taskManager.createSubtask(subtask);

        assertEquals(task, taskManager.getTask(task.getId()));
        assertEquals(epic, taskManager.getEpic(epic.getId()));
        assertEquals(subtask, taskManager.getSubtask(subtask.getId()));
    }

    @Test
    void shouldHandleManualAndAutoGeneratedIds() {
        taskManager = Managers.getDefault();
        Task task1 = new Task("Task1", Status.NEW, "Description");
        task1.setId(5);
        task1 = taskManager.createTask(task1);//task1 сохранила id = 5

        Task task2 = new Task("Task2", Status.NEW, "Description");
        task2 = taskManager.createTask(task2);//task2 получила id > 5 (автогенерация)

        assertEquals(5, task1.getId());
        assertTrue(task2.getId() > 5);
        assertNotEquals(task1.getId(), task2.getId());

        Task task3 = new Task("Task3", Status.NEW, "Description");
        task3.setId(5);//Невозможно добавить задачу с существующим id
        assertThrows(IllegalArgumentException.class, () -> {
            taskManager.createTask(task3);
        });
    }

    @Test
    void shouldPreserveTaskFieldsWhenAddedToManager() {
        taskManager = Managers.getDefault();
        Task task = new Task("Task", Status.NEW, "Description");
        task.setId(1);
        //Сохранение полей задачи (name, status, description) после добавления в менеджер
        Task addedTask = taskManager.createTask(task);

        assertEquals(task.getName(), addedTask.getName());
        assertEquals(task.getDescription(), addedTask.getDescription());
        assertEquals(task.getStatus(), addedTask.getStatus());
    }

    @Test
    void epicStatusShouldUpdateBasedOnSubtasks() {
        taskManager = Managers.getDefault();
        Epic epic = new Epic("Epic", "Description");
        taskManager.createEpic(epic);

        Subtask subtask1 = new Subtask("Subtask1", Status.NEW, "Desc1", epic.getId());
        Subtask subtask2 = new Subtask("Subtask2", Status.DONE, "Desc2", epic.getId());
        taskManager.createSubtask(subtask1);
        taskManager.createSubtask(subtask2);
        //Автоматическое обновление статуса эпика (Epic) в зависимости от статусов его подзадач (Subtask)
        assertEquals(Status.IN_PROGRESS, epic.getStatus());
    }

    @Test
    void updateNonExistentTaskShouldNotAffectManager() {
        taskManager = Managers.getDefault();
        Task task = new Task("Task", Status.NEW, "Description");
        task.setId(15);
        taskManager.updateTask(task);
        //Попытка обновить несуществующую задачу не должна влиять на менеджер
        assertNull(taskManager.getTask(10));
    }

    @Test
    void deleteAllTasksShouldClearOnlyTasksAndKeepEpicsWithSubtasks() {
        taskManager = Managers.getDefault();
        Task task1 = new Task("Task 1", Status.NEW, "Description");
        Task task2 = new Task("Task 2", Status.IN_PROGRESS, "Description");
        taskManager.createTask(task1);
        taskManager.createTask(task2);

        Epic epic = new Epic("Epic", "Description");
        taskManager.createEpic(epic);

        Subtask subtask = new Subtask("Subtask", Status.NEW, "Description", epic.getId());
        taskManager.createSubtask(subtask);

        taskManager.deleteAllTasks();

        assertTrue(taskManager.getAllTasks().isEmpty(), "Все задачи должны быть удалены");
        assertFalse(taskManager.getAllEpics().isEmpty(), "Эпики не должны удаляться");
        assertFalse(taskManager.getAllSubtasks().isEmpty(), "Подзадачи не должны удаляться");

        List<Subtask> epicSubtasks = taskManager.getEpicSubtasks(epic.getId());
        assertEquals(1, epicSubtasks.size(), "Подзадачи должны остаться в эпике");
    }
}